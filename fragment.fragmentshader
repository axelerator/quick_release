#version 120
uniform float exposure;
uniform float shadows;
uniform float highlights;

uniform float contrast;

// Interpolated values from the vertex shaders
varying vec2 UV;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;

vec3 rgb2hsv(vec3 c)
{
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

void main(){
vec4 src;
src = texture2D( myTextureSampler, UV );

vec3 hsv = rgb2hsv(src.rgb);
hsv.z *= exposure;
//hsv.z = clamp((hsv.z * (1.0 + contrast) - (contrast * 0.25)), 0.0, 2.0);
hsv.z = pow(hsv.z, 1.0 + contrast);


float maxAddedValue = 1.0 - hsv.z;
float shadowAmount = pow((1.0 - hsv.z), 2.0);
vec3 hsv_low = vec3(0, - (hsv.y *(shadowAmount * shadows )), maxAddedValue * shadowAmount * shadows * 0.3 );


float highlightAmount = pow(hsv.z, 2);

float x = smoothstep(0.7, 2.0, hsv.z);
float y = -(2.0 - hsv.z);


vec3 hsv_high = vec3(0, 0, y * x * highlights * 3.0);


vec3 rgb = hsv2rgb(hsv + hsv_low + hsv_high);

gl_FragColor = vec4(rgb.r ,rgb.g, rgb.b, 1.0);
//float combinedExposure = exposure * localExposure;
// Output color = color of the texture at the specified UV
//gl_FragColor =  src * vec4(combinedExposure,combinedExposure,combinedExposure,1.0);

}
